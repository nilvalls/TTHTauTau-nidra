#!/usr/bin/env python

import ROOT
import copy

clone = {
        # 'ttH115': ['ttH110'],
        # 'ttH130': ['ttH135', 'ttH140'],
        }

samples = {
        'data_obs': ['Collisions'],
        'ttH110': ['TTH_110'],
        'ttH115': ['TTH_115'],
        'ttH120': ['TTH_120'],
        'ttH125': ['TTH_125'],
        'ttH130': ['TTH_130'],
        'ttH135': ['TTH_135'],
        'ttH140': ['TTH_140'],
        'diboson': ['WW','WZ','ZZ'],
        'singlet': ['singleTopSch', 'singleTopBarSch', 'singleTopTch', 'singleTopBarTch', 'singleTopPlusW', 'singleTopBarPlusW'],
        'ttbar': ['TTbar_Hadronic', 'TTbar_SemiLept', 'TTbar_FullLept'],
        'wjets': ['WplusOneJet', 'WplusTwoJets', 'WplusThreeJets', 'WplusFourJets'],
        'zjets': ['ZplusOneJet', 'ZplusTwoJets', 'ZplusThreeJets', 'ZplusFourJets'],
        #'sT' : ['sT-sCh','sT-tCh'],
        #'sTbar' : ['sTbar-sCh','sTbar-tCh'],
        #'sTplusW' : ['sTW','sTbarW']
}

sys_rename = {
        'JES': 'CMS_scale_j',
        'hfSF': 'CMS_eff_b',
        'lfSF': 'CMS_fake_b',
        'topPtSF': 'CMS_ttH_topPtcorr',
        'PUcorr': 'CMS_ttH_pu',
        'qSquared': 'Q2scale_ttH_ttbar',
        'CSVeventWeight': 'CMS_ttH_CSV'
}

def copy_histos(infile, outfile, invar, outvar, mod_string=None):
    mod_string = mod_string.replace("up", "Up").replace("down", "Down")
    for (key, val) in sys_rename.items():
        if key in mod_string:
            mod_string = mod_string.replace(key, val)

    for (outsample, ss) in samples.items():
        try:
            base_histo = infile.Get(ss[0] + '/' + invar)

            for s in ss[1:]:
                try:
                    plus_histo = infile.Get(s + '/' + invar)
                    base_histo.Add(plus_histo)
                except:
                    print "Could not find " + s
                    pass

            new_name = outsample + '_' + outvar + '_' + mod_string
            base_histo.SetName(new_name)
            outfile.WriteObject(base_histo, new_name)
            print "Saved", new_name, "with", base_histo.Integral(), "events"

            if outsample in clone:
                for clonesample in clone[outsample]:
                    name = new_name.replace(outsample, clonesample)
                    base_histo.SetName(name)
                    outfile.WriteObject(base_histo, name)
                    print "Saved", name, "with", base_histo.Integral(), "events"

        except:
            print "Could not find " + ss[0]
            pass

if __name__ == "__main__":
    ROOT.gROOT.SetBatch()

    import glob
    import optparse
    import os.path
    import re
    import sys

    parser = optparse.OptionParser(usage="%prog [options] path")
    parser.add_option("-c", "--category", dest="cat",
            help="input is classified as category CAT",
            metavar="CAT", default=None)
    parser.add_option("-v", "--variables", dest="vars",
            help="use VARS to transform variables.  This is a "
            "comma-separated string, containing invar=outvar pairs.",
            metavar="VARS", default="OS/VisibleMass_TT=VisMass")
    parser.add_option("-o", "--output-file", dest="ofile",
            help="use FILE as output file", metavar="FILE",
            default="taus.root")
    parser.add_option("-p", "--pattern", dest="pattern",
            help="use PATTERN to identify category and systematic "
            "(requires two groups)", metavar="PATTERN",
            default=r"([0-9](?:-[0-9]|\+)?n?b_[0-9](?:-[0-9]|\+)?n?b)(?:_(.*(?:[Uu]p|[Dd]own)))?")
    parser.add_option("-s", "--systematics", dest="sys",
            help="systematic of type SYS", metavar="SYS",
            default=None)
    (opts, args) = parser.parse_args()

    if len(args) < 1:
        parser.error("need to specify input path")

    if len(args) != 1 and opts.cat or opts.sys:
        parser.error("can only specify category and/or systematics for one input directory")

    vars = map(lambda s: s.split("="), opts.vars.split(","))

    reg = re.compile(opts.pattern)

    outfile = ROOT.TFile(opts.ofile, 'RECREATE')
    for f in args:
        m = reg.search(f)
        if not m and not opts.cat:
            sys.stderr.write("file {f} does not match pattern!\n".format(f=f))
            continue

        print "Processing", f

        if opts.cat is not None:
            cat = opts.cat
        else:
            cat = "TTL_" + m.group(1)

        if opts.sys is not None:
            sys = opts.sys
        elif m.group(2):
            sys = m.group(2)
        else:
            sys = None

        if sys:
            sys = "_" + sys.replace("up", "Up").replace("down", "Down")
            for (key, val) in sys_rename.items():
                if key in sys:
                    sys = sys.replace(key, val)
        else:
            sys = ""

        mod_string = '{c}{s}'.format(c=cat, s=sys)

        infile = ROOT.TFile(os.path.join(f, 'nidra_rawHistos.root'))
        outfile.cd()
        for (ivar, ovar) in vars:
            copy_histos(infile, outfile, ivar, ovar, mod_string)

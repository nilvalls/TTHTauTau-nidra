#!/usr/bin/env python
import ROOT
import copy

samples = {
        'data_obs': ['Collisions'],
        'ttH125': ['TTHTauTau_125'],
        'diboson': ['WW','WZ','ZZ'],
        'singlet': ['singleTopSch', 'singleTopBarSch', 'singleTopTch', 'singleTopBarTch', 'singleTopPlusW', 'singleTopBarPlusW'],
        'ttbar': ['TTbar_Hadronic', 'TTbar_SemiLept', 'TTbar_FullLept'],
        'wjets': ['WplusOneJet', 'WplusTwoJets', 'WplusThreeJets', 'WplusFourJets'],
        'zjets': ['ZplusOneJet', 'ZplusTwoJets', 'ZplusThreeJets', 'ZplusFourJets'],
        #'sT' : ['sT-sCh','sT-tCh'],
        #'sTbar' : ['sTbar-sCh','sTbar-tCh'],
        #'sTplusW' : ['sTW','sTbarW']
}

sys_rename = {
        'JES': 'CMS_scale_j',
        'hfSF': 'CMS_eff_b',
        'lfSF': 'CMS_fake_b',
        'topPtSF': 'CMS_ttH_topPtcorr',
        'PUcorr': 'CMS_ttH_pu'
}

def copy_histos(infile, outfile, invar, outvar, mod_string=None):
    mod_string = mod_string.replace("up", "Up").replace("down", "Down")
    for (key, val) in sys_rename.items():
        if key in mod_string:
            mod_string = mod_string.replace(key, val)

    for (new_name, ss) in samples.items():
        try:
            base_histo = infile.Get(ss[0] + '/' + invar)

            for s in ss[1:]:
                try:
                    plus_histo = infile.Get(s + '/' + invar)
                    base_histo.Add(plus_histo)
                except:
                    print "Could not find " + s
                    pass

            new_name += '_' + outvar + '_' + mod_string
            base_histo.SetName(new_name)
            outfile.WriteObject(base_histo, new_name)
            print "Saved", new_name, "with", base_histo.Integral(), "events"
        except:
            print "Could not find " + ss[0]
            pass

if __name__ == "__main__":
    ROOT.gROOT.SetBatch()

    import optparse
    import os.path

    parser = optparse.OptionParser(usage="%prog [options] path")
    parser.add_option("-i", "--input-variable", dest="invar",
            help="use VAR as input variable", metavar="VAR",
            default="OS/VisibleMass_TT")
    parser.add_option("-o", "--output-variable", dest="outvar",
            help="use VAR as output variable", metavar="VAR",
            default="VisMass")
    parser.add_option("-j", "--jets", dest="jets",
            help="input has NUM jets", metavar="NUM",
            default=4)
    parser.add_option("-t", "--tags", dest="tags",
            help="input has NUM tags", metavar="NUM",
            default=2)
    parser.add_option("-s", "--systematics", dest="sys",
            help="systematic of type SYS", metavar="SYS",
            default=None)
    (opts, args) = parser.parse_args()

    if len(args) != 1:
        parser.error("need to specify input path")

    if opts.sys is not None:
        sys = "_" + opts.sys.replace("up", "Up").replace("down", "Down")
        for (key, val) in sys_rename.items():
            if key in sys:
                sys = sys.replace(key, val)
    else:
        sys = ""

    mod_string = 'TTL_j{j}_t{t}{s}'.format(j=opts.jets, t=opts.tags, s=opts.sys)

    infile = ROOT.TFile(os.path.join(args[0], 'nidra_rawHistos.root'))
    outfile = ROOT.TFile(mod_string + '.root', 'RECREATE')
    outfile.cd()

    copy_histos(infile, outfile, opts.invar, opts.outvar, opts.sys)

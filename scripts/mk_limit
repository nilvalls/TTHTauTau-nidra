#!/usr/bin/env python

import BEAN.DatacardMaker.datacard as datacard
import datacard_histograms

import glob
import optparse
import os.path
import ROOT as r
import subprocess
import sys

r.gROOT.SetBatch()

ofilename = "temp.root"
ocardname = "temp.card"

parser = optparse.OptionParser(usage="%prog [options] pattern categories")
parser.add_option("-s", "--disable-systematic", dest="nosys",
        help="disable uncertainties in SYS (separated by whitespace).",
        metavar="SYS", default="")
parser.add_option("-b", "--btag-mode", dest="btag",
        help="set b-tag uncertainty treatment to MODE.  (Allowed "
        "values: off, rate, shape, category)", metavar="MODE",
        default="category")

(opts, args) = parser.parse_args()

try:
    pattern = args[0]
    categories = args[1].split()
except:
    parser.error("need both pattern and categories specified")

try:
    btag_mode = datacard.parse_btag_mode(opts.btag)
except:
    parser.error("invalid b-tag mode: " + opts.btag)

invar = "OS/MVA"
outvar = "CFMlpANN"

of = r.TFile(ofilename, "RECREATE")

new_cs = set()
for c in categories:
    cname = datacard.split_category_string(c)[0]
    for d in glob.glob(pattern.format(c=cname)):
        new_cname = "TTL_" + cname
        syst = d.split(cname)[1]
        infile = r.TFile(os.path.join(d, 'nidra_rawHistos.root'))
        if not infile.IsOpen():
            print "Not processing", d
            continue
        else:
            print "Processing", d
        datacard_histograms.copy_histos(infile, of, invar, outvar, new_cname + syst)
        infile.Close()
        new_cs.add("TTL_" + c)

cs = map(datacard.split_category_string, list(new_cs))
if len(cs) != len(categories):
    parser.error("not all specified categories were found")

datacard.log = sys.stdout
try:
    datacard.create_datacard(of, open(ocardname, 'w'), outvar, cs, print_summary=True,
            btag_mode=btag_mode, disabled_systematics=opts.nosys.split())
except:
    pass

of.Close()

proc = subprocess.Popen(["combine", "-M", "Asymptotic", "--minosAlgo", "stepping",
    "-m", "125", "-t", "-1", ocardname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
proc.wait()
for l in proc.stdout.readlines():
    sys.stdout.write(l)
